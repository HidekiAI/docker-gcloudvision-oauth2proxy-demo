## OAuth2 Proxy Config File
## https://github.com/oauth2-proxy/oauth2-proxy

# see: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview
# Use:
# $ 	dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_'; echo
# during build/install, and use 'sed s/YOUR_SECRET_HERE/thehashyougenerated/g' or something
# NOTE: Use build_image.sh bash script to generate env-var OAUTH2_PROXY_COOKIE_SECRET, otherwise you will need to set it here 
#cookie_secret = "constant_one_time_generated_hash_see_comment_above"

# to avoid warnings, we need to match the domain name in the proxy_pass directive in nginx.conf 
# Spaces and ports are not allowed, and it is comma-separated
# using the ".mydoamin.tld" wildcard will allow the cookie to be used on any subdomain of mydomain.tld
# Note that if security is not a concern, you can use "" wildcard for cookie_domains
## Domain   - (optional) cookie domain to force cookies to (ie: .yourcompany.com)
# NOTE: LEAVE THIS "" EMPTY unless you have a specific reason to use it
#cookie_domains = ""
## Secure   - secure cookies are only sent by the browser of a HTTPS connection (recommended)
cookie_secure = false

# It's recommended to refresh sessions on a short interval (1h) with `cookie-refresh` setting which validates that the account is still authorized.
## Expire   - (duration) expire timeframe for cookie
## Refresh  - (duration) refresh the cookie when duration has elapsed after cookie was initially set.
##            Should be less than cookie_expire; set to 0 to disable.
##            On refresh, OAuth token is re-validated.
##            (ie: 1h means tokens are refreshed on request 1hr+ after it was set)
# cookie_expire = "168h"
# cookie_refresh = ""

# Enter from 'https://console.cloud.google.com/apis/credentials/oauthclient' -> Additional information
client_id = "_YOUR_CLIENT_ID_FROM_GCLOUD_.apps.googleusercontent.com"
# Enter from 'https://console.cloud.google.com/apis/credentials/oauthclient' -> under "Client secret"
client_secret = "_SECRET_FROM_GCLOUD_"

# since the account(s) I've authorized on Google Cloud Vision/OCR service was/is with my gmail.com account:
# can also do "*" wildcard for some auth such as "okta" where it's more secure
email_domains = [
    "gmail.com",
]

## the OAuth Redirect URL.
# redirect_url defaults to the "https://" + requested host header + "/oauth2/callback"
# so unless you want the callback to be different than the host header, you can leave this commented out.
# Note that without double-quoting the URL, it will usually fail to start up, so rather than taking chances,
# make sure to just double-quote it and you'll save yourself a lot of time!
# Google cloud oauth redirect doesn't seem to allow (static) IP addresses, and requires domain names to be
# ending with common exteions (.com, .net, .org, etc), but it does allow special case of "localhost" probably
# for testing purposes. So, if thr callback host is on the same machine as your testing host, you can use
# "localhost" as the host part of the redirect URL. Otherwise, you'll need to use a domain name that ends
# with a common extension, and make sure to add it to the "Authorized redirect URIs" list in the Google
# Cloud Console -> Credentials -> OAuth 2.0 Client IDs -> "YOUR_CLIENT_ID" -> "Authorized redirect URIs"
# (see: https://console.cloud.google.com/apis/credentials/oauthclient)
# Just use the appropriate URI PATHs from the "Authroized redirect URIs" list:
#redirect_url = "http://localhost/oauth2/callback"
#redirect_url = "http://localhost/redirect/authorized"
#redirect_url = "http://internal-developers.${FQ_DOMAIN_NAME}/oauth2/callback"
redirect_url = "http://internal-developers.yourdomain.tld:4180/oauth2/callback"

# NOTE: adjust based on have/have not of gcloud compute instances
# this gets triggered on the very final redirect
# NOTE: it may be that we cannot use the environment, so we'll have the docker-compose.yml file set the OAUTH2_PROXY_UPSTREAMS 
#upstreams = [
#    #"http://google-compute-instance-ip:port" 
#    "http://my-rust-app:${MY_RUST_APP_PORT}/"
#]

# explicitly define as IPv4 address, otherwise it will listen on IPv6 address
http_address = "0.0.0.0:4180"
https_address = ":4180"
