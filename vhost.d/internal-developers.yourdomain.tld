#VIRTUAL_HOST=internal-developers.yourdomain.tld
# hostname: internal-developers

# Most of the configuration is from https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview/ "Nginx auth_request" section

# nginx-proxy will port-forward to ports defined in "proxy_pass"
# assumes that the hostname is "oauth2-proxy"
#listen 80;
listen 443 ssl;
#server_name internal-developers.yourdomain.tld;
server_name ...;

include ./ssl/internal-developers/ssl.conf;

#resolver    

location /oauth2/ {
    #internal;   # only allow internal redirects
    #deny all;   # deny everyone else

    proxy_pass       http://$host:4180;
    #proxy_pass       http://internal-developers:4180;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;
    # or, if you are handling multiple domains:
    # proxy_set_header X-Auth-Request-Redirect $scheme://$host$request_uri;
}

location / {
    #internal;   # only allow internal redirects
    #deny all;   # deny everyone else

    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    # if you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;

    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;

    # When using the --set-authorization-header flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }

    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }

    #proxy_pass       http://internal-developers:4180;
    proxy_pass  http://$host:4180/;
    # or "root /path/to/site;" or "fastcgi_pass ..." etc
}

# Endpoints defined in 'https://oauth2-proxy.github.io/oauth2-proxy/docs/features/endpoints':
# OAuth2 Proxy responds directly to the following endpoints. All other endpoints will be proxied upstream when authenticated. 
# The /oauth2 prefix can be changed with the --proxy-prefix config variable.
# * /robots.txt - returns a 200 OK response that disallows all User-agents from all paths; see robotstxt.org for more info
# * /ping - returns a 200 OK response, which is intended for use with health checks
# * /metrics - Metrics endpoint for Prometheus to scrape, serve on the address specified by --metrics-address, disabled by default
# * /oauth2/sign_in - the login page, which also doubles as a sign out page (it clears cookies)
# * /oauth2/sign_out - this URL is used to clear the session cookie
# * /oauth2/start - a URL that will redirect to start the OAuth cycle
# * /oauth2/callback - the URL used at the end of the OAuth cycle. The oauth app will be configured with this as the callback url.
# * /oauth2/userinfo - the URL is used to return user's email from the session in JSON format.
# * /oauth2/auth - only returns a 202 Accepted response or a 401 Unauthorized response; for use with the Nginx auth_request directive
# How to verify/test:
# go to http://internal-developers.yourdomain.tld:4180/ping to verify we're live
# Next, go to http://internal-developers.yourdomain.tld:4180/oauth2/sign_in to login using your gmail account (use sign_in instead of start to clear last cookies if any)
# Now, go to http://internal-developers.yourdomain.tld:4180/oauth2/userinfo to verify you were authorized
# Note that you can also call http://internal-developers.yourdomain.tld:4180/oauth2/auth to verify you were authorized (you should get a 202 Accepted response)
# Finally, go to http://internal-developers.yourdomain.tld:4180/oauth2/sign_out to logout
# And go to http://internal-developers.yourdomain.tld:4180/oauth2/userinfo to verify you were logged out (you should get a 401 Unauthorized response)

location /robots.txt {
    proxy_pass http://internal-developers:4180/robots.txt;
}
location /ping {
    proxy_pass http://internal-developers:4180/ping;
}
location /metrics {
    proxy_pass http://internal-developers:4180/metrics;
}
location /oauth2/sign_in {
    proxy_pass http://internal-developers:4180/oauth2/sign_in;
}
location /oauth2/sign_out {
    proxy_pass http://internal-developers:4180/oauth2/sign_out;
}
location /oauth2/start {
    proxy_pass http://internal-developers:4180/oauth2/start;
}

# See "oauth2_proxy.cfg" file:
# My redirect_url is "https://internal-developers.yourdomain.tld/oauth2/callback"
#
# redirect callback
# Upon authentication, the oauth2-proxy will redirect the user to the /oauth2/callback path as:
# 'http://myhost.localdomain.tld/oauth2/callback?state=...&code=...&scope=email+profile+openid+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&authuser=0&prompt=consent'
# The above is a GET request once the user selects her gmail account to login with and grants access to the application and redirects backend
location /oauth2/callback {
    # Google cloud oauth2 client should now have packaged up
    # the access token in the response body, in which it is then
    # stored in the X-Auth-Request-Access-Token header by 
    # the oauth2-proxy, which is then passed to the backend
    # application by nginx using the proxy_set_header directive.
    # the backend application can then use the access Token 
    # to make requests to the Google Cloud Vision API 
    #proxy_pass       http://$host:4180/oauth2/callback;
    #proxy_pass       http://internal-developers:4180/oauth2/callback;
    #proxy_pass       http://internal-developers:4180/callback;
    proxy_pass       http://my-rust-app:${MY_RUST_APP_PORT}/oauth2/callback;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    proxy_set_header X-Auth-Request-Redirect $request_uri;

    env MY_RUST_APP_PORT;
}
location /oauth2/userinfo {
    proxy_pass http://internal-developers:4180/oauth2/userinfo;
}

location = /oauth2/auth {
    #internal;   # only allow internal redirects
    #deny all;   # deny everyone else

    proxy_pass       http://$host:4180/oauth2/auth;
    #proxy_pass       http://internal-developers:4180/oauth2/auth;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
}
