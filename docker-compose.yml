version: '3.11'

# Dependencies 
# ============
# Note that 'links:' needs to be correctly set up or it will cause circular-dependencies error)
# it is for the purpose of network ifup and ifdown
# gateway +-> internal-developers -> redis
#         +-> my-rust-app -> internal-developers -> redis
#         +-> www +-> internal-developers -> redis
#                 +-> my-rust-app -> internal-developers -> redis
# at this time, the internal-developers service is the common denominator for all the other services, for
# it is the service that has the capability to auth against google cloud oauth2

networks:
  # the host (edge-router) that is hosting the docker containers should have a static IP address of .1
  my-rust-app-network:
    # NOTE: when possible, avoid specifying the IP address, especially on a multi-homed host for you may get routing issues where payloads are routed to wrong interface
    driver: bridge

services:
  # gateway is the nginx-proxy that routes to the internal-developers and www services
  # all requests to internal-developers.yourdomain.tld and www.yourdomain.tld will be routed to the internal-developers and www services respectively
  # and the internal-developers and www services will be able to access each other via their service names
  # it is also the only service that is exposed to the outside world (hence it's the proxy)
  gateway:
    hostname: gateway
    restart: unless-stopped
    image: jwilder/nginx-proxy
    depends_on:
      - internal-developers
      - www
      - my-rust-app
    # on the gateway proxy, ports opened are straight-pass-through 1:1 mapped
    ports:
      - "80:80"
      - "443:443"
    environment:
      # all requests that does not have "www.yourdomain.tld" or "internal-developers.yourdomain.tld" will just default to here
      # including requests such as http://10.86.86.86/oauth2/callback and http://localhost:4180/oauth2/callback which
      # has no routing rules defined in the vhost.d folder
      VIRTUAL_HOST: "*"
      VIRTUAL_PROTO: "https"
      VIRTUAL_PORT: "80,443,4180,${MY_RUST_APP_PORT}"
      VIRTUAL_PATH: "/"
      MY_RUST_APP_PORT: "${MY_RUST_APP_PORT}"
      FQ_DOMAIN_NAME: "${FQ_DOMAIN_NAME}" # e.g. "yourdomain.tld" to be used in the vhost.d folder (my-routes.conf file)
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./vhost.d:/etc/nginx/vhost.d:ro"
      - "./ssl/gateway/certs:/etc/nginx/certs/:ro"
      - "./www/gateway:/usr/share/nginx/html:ro"
    networks:
      my-rust-app-network:
        # create aliases so that each container can communicate with each other via their FQDN rather than hostname
        aliases:
          - internal-developers.${FQ_DOMAIN_NAME}
          - www.${FQ_DOMAIN_NAME}
          - my-rust-app.${FQ_DOMAIN_NAME}
    # create secure ONE-WAY-tunnels to these containers:
    links:
      - internal-developers
      - www
      - my-rust-app

  internal-developers:
    # see vhost.d/internal-developers.yourdomain.tld for the proxy configuration (in particular, "proxy_pass" location which port-forwards to port 4180)
    hostname: internal-developers
    restart: unless-stopped
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    #no need to add any args such as "--http-address=0.0.0.0:4180" for they should just all be set in oauth2_proxy.cfg file
    depends_on:
      - redis
    command:
      - "--config=/etc/oauth2_proxy.cfg"
      # NOTE: Package oauth2-proxy does not support cfg file, so we need to use the command-line args instead
      # See: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/session_storage/#redis-storage
      - "--session-store-type=redis"
      - "--redis-connection-url=redis://redis:6379/1"
      # use "--upstream=static://202" if you are having trouble with your firewall blocking the connections to my-rust-app host or something as a temporary workaround just to verify that whole round trip works
      - "--upstream=http://my-rust-app:${MY_RUST_APP_PORT}/"  # use comma-separated (no-spaces) list of upstreams if you have more than one (note that arg is singular "upstream")

    # port-forward 4180 on THIS machine to 4180 in the container
    ports:
      # Note that callbacks/redirects are not routed to port 4180, so we need to expose 80 and 443 as well
      - "4180:4180"
      - 80
      - 443
    # environment variables for the nginx-proxy analyzer/generator to dynamically generate the proxy configuration
    environment:
      #VIRTUAL_HOST: "internal-developers.${FQ_DOMAIN_NAME}"
      VIRTUAL_HOST: "*:4180"
      VIRTUAL_PROTO: "https"
      VIRTUAL_PORT: "4180,80,443"
      MY_RUST_APP_PORT: "${MY_RUST_APP_PORT}"
      # NOTE: "we can technically populate all the OAUTH2_PROXY_xxx as env-vars here instead of in oauth2_proxy.cfg to reduce another file dependencies..."
      # the beauty of having it here instead of in the oauth2_proxy.cfg file is that you can set things up"
      # as env-var, for example: "'OAUTH2_PROXY_COOKIE_SECRET: "$(dd if: "/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_'; echo)'"
      # which, if you're in BASH already, it'll setup different cookie every rebuild"
      OAUTH2_PROXY_CONFIG: "/etc/oauth2_proxy.cfg"
      # In your BASH script that will call "docker-compose build", do this:"
      #$ export OAUTH2_PROXY_COOKIE_SECRET: ""$(dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_'; echo)""
      # IMPORTANT: "DO _NOT_ place quotation marks around the value of the env-var, otherwise it'll be treated as a string instead of a command causing base64 to be +2 bytes more than it should be"
      OAUTH2_PROXY_COOKIE_SECRET: "${OAUTH2_PROXY_COOKIE_SECRET}"
      OAUTH2_PROXY_UPSTREAMS: "http://my-rust-app:${MY_RUST_APP_PORT}/"
      OAUTH2_PROXY_UPSTREAM: "http://my-rust-app:${MY_RUST_APP_PORT}/"
    volumes:
      - "./oauth2_proxy.cfg:/etc/oauth2_proxy.cfg:ro"
      - "./www/internal-developers:/usr/share/nginx/html:ro"
      - "./ssl/internal-developers/certs:/etc/nginx/certs/:ro"
    # from inside the my-rust-app container, you could access the oauth2-proxy service at http://oauth2-proxy:4180.
    networks:
      my-rust-app-network:
        # create aliases so that each container can communicate with each other via their FQDN rather than hostname
        aliases:
          - internal-developers.${FQ_DOMAIN_NAME}
          - www.${FQ_DOMAIN_NAME}
          - my-rust-app.${FQ_DOMAIN_NAME}
          - redis # have to define one here, or else it'll fail on '--redis-connection-url=redis://redis:6379' command
    # create secure ONE-WAY-tunnels to these containers:
    links:
      - redis # IMPORTANT: "have to define one here, or else it'll fail on '--redis-connection-url=redis://redis:6379' command" because redist needs to be running first to accept connections

  # www is a static website that is hosted on nginx for the purpose of my-rust-app to be able to access it
  # it is separate from my-rust-app because the nginx:latest image could be using alpine instead of debian
  # as well as it is a good practice to separate the static website from the dynamic web-app
  www:
    hostname: www
    restart: unless-stopped
    # rather than using apache2, we use nginx with static html files
    image: nginx:latest
    volumes:
      - "./www/www:/usr/share/nginx/html:ro"
      - "./ssl/www/certs:/etc/nginx/certs/:ro"
    ports:
      - 80
      - 443
    # environment variables for the nginx-proxy analyzer/generator to dynamically generate the proxy configuration
    environment:
      VIRTUAL_HOST: "www.${FQ_DOMAIN_NAME}"
      VIRTUAL_PROTO: "https"
      VIRTUAL_PORT: "80,443"
      MY_RUST_APP_PORT: "${MY_RUST_APP_PORT}"
    networks:
      my-rust-app-network:
        # create aliases so that each container can communicate with each other via their FQDN rather than hostname
        aliases:
          - internal-developers.${FQ_DOMAIN_NAME}
          - www.${FQ_DOMAIN_NAME}
          - my-rust-app.${FQ_DOMAIN_NAME}
    # create secure ONE-WAY-tunnels to these containers:
    links:
      - internal-developers
      - my-rust-app

  # though it's an overkill, I like the concept of persisting/caching
  # auth token in redis
  redis:
    hostname: redis
    restart: unless-stopped
    image: redis:latest
    command: redis-server
    ports:
      - 6379:6379
    # if and when we decide to persist the redis data, we can use this volume, but for now, we just need to cache it
    #volumes:
    #  - redis-data:/data
    environment:
      VIRTUAL_HOST: "redis.${FQ_DOMAIN_NAME}"
      VIRTUAL_PROTO: "https"
      VIRTUAL_PORT: "6379"
    networks:
      # make sure that the redis container is on the same network as the other containers or else interal-developers won't be able to access it!
      my-rust-app-network: {}

  # this is the "upstream" app (final destination) of where the oauth2-proxy will forward the request to
  # see: https://oauth2-proxy.github.io/oauth2-proxy/docs/configuration/overview#upstreams-configuration
  my-rust-app:
    hostname: my-rust-app
    image: my-rust-app-image:latest
    ports:
      # We only need the ports open to what the Listener is aware of, no need to have ports 80/443
      - "${MY_RUST_APP_PORT}:${MY_RUST_APP_PORT}"
    # from inside the my-rust-app container, you could access the oauth2-proxy service at http://oauth2-proxy:4180.
    environment:
      # NOTE: VIRTUAL_* env vars are defined here so that we can have nginx-proxy forward/route REST calls to my-rust-app
      #VIRTUAL_HOST: "my-rust-app.${FQ_DOMAIN_NAME}"
      VIRTUAL_HOST: "*:${MY_RUST_APP_PORT}"
      VIRTUAL_PROTO: "https"
      VIRTUAL_PORT: "${MY_RUST_APP_PORT}"
      MY_RUST_APP_PORT: "${MY_RUST_APP_PORT}"
    command:
      - "/usr/local/bin/my_rust_app"
      - "--port=${MY_RUST_APP_PORT}"
    networks:
      my-rust-app-network:
        # create aliases so that each container can communicate with each other via their FQDN rather than hostname
        aliases:
          - internal-developers.${FQ_DOMAIN_NAME}
          - www.${FQ_DOMAIN_NAME}
          - my-rust-app.${FQ_DOMAIN_NAME}
    # create secure ONE-WAY-tunnels to these containers:
    links:
      - internal-developers # in case cookie expired, we'd want to sign_in again
      - redis # we want to query redis for the auth token
  #volumes:
  #  redis-data:
