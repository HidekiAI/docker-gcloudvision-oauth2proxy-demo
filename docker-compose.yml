version: '3.11'

networks:
  # the host (edge-router) that is hosting the docker containers should have a static IP address of .1
  my-rust-app-network: 
    driver: bridge
    ipam:
      driver: default
      config:
        # assign a subnet mainly for debugging purposes, otherwise the port exposed on THIS host should suffice
        - subnet: 10.86.86.0/24
          gateway: 10.86.86.1

services:
  # gateway is the nginx-proxy that routes to the internal-developers and www services
  # all requests to internal-developers.yourdomain.tld and www.yourdomain.tld will be routed to the internal-developers and www services respectively
  # and the internal-developers and www services will be able to access each other via their service names
  # it is also the only service that is exposed to the outside world (hence it's the proxy)
  gateway:
    hostname: gateway
    #restart: unless-stopped
    image: jwilder/nginx-proxy
    depends_on:
      - internal-developers
      - www
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
      - "./vhost.d:/etc/nginx/vhost.d:ro"
      - "./ssl/gateway/certs:/etc/nginx/certs/:ro"
      - "./www/gateway:/usr/share/nginx/html:ro"
    networks:
      # gateways has to have a static IP so that edge-routers can route to here...
      my-rust-app-network:
        ipv4_address: 10.86.86.86
        aliases:
          - internal-developers.${FQ_DOMAIN_NAME}
          - www.${FQ_DOMAIN_NAME}
    links:
      - internal-developers
      - www

  internal-developers:
    # see vhost.d/internal-developers.yourdomain.tld for the proxy configuration (in particular, "proxy_pass" location which port-forwards to port 4180)
    hostname: internal-developers
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    #no need to add any args such as "--http-address=0.0.0.0:4180" for they should just all be set in oauth2_proxy.cfg file
    command: 
      - "--config=/etc/oauth2_proxy.cfg"
      - "--http-address=0.0.0.0:4180"
    # port-forward 4180 on THIS machine to 4180 in the container
    ports:
      - 4180:4180/tcp
      - 4080:80/tcp
      - 4443:443/tcp
    # environment variables for the nginx-proxy analyzer/generator to dynamically generate the proxy configuration
    environment:
      - VIRTUAL_HOST=internal-developers.${FQ_DOMAIN_NAME}
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=4180
      # NOTE: we can technically populate all the OAUTH2_PROXY_xxx as env-vars here instead of in oauth2_proxy.cfg to reduce another file dependencies...
      # the beauty of having it here instead of in the oauth2_proxy.cfg file is that you can set things up
      # as env-var, for example: 'OAUTH2_PROXY_COOKIE_SECRET: $(dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_'; echo)'
      # which, if you're in BASH already, it'll setup different cookie every rebuild
      - OAUTH2_PROXY_CONFIG=/etc/oauth2_proxy.cfg
      # In your BASH script that will call "docker-compose build", do this:
      #$ export OAUTH2_PROXY_COOKIE_SECRET="$(dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_'; echo)"
      # IMPORTANT: DO _NOT_ place quotation marks around the value of the env-var, otherwise it'll be treated as a string instead of a command causing base64 to be +2 bytes more than it should be
      - OAUTH2_PROXY_COOKIE_SECRET=${OAUTH2_PROXY_COOKIE_SECRET}
    volumes:
      - "./oauth2_proxy.cfg:/etc/oauth2_proxy.cfg:ro"
      - "./www/internal-developers:/usr/share/nginx/html:ro"
      - "./ssl/internal-developers/certs:/etc/nginx/certs/:ro"
    #restart: unless-stopped
    # from inside the my-rust-app container, you could access the oauth2-proxy service at http://oauth2-proxy:4180.
    networks:
      my-rust-app-network: 
        # sadly, if I do not specify the IP address, things just don't work...
        ipv4_address: 10.86.86.150

  # www is a static website that is hosted on nginx for the purpose of my-rust-app to be able to access it
  # it is separate from my-rust-app because the nginx:latest image could be using alpine instead of debian
  # as well as it is a good practice to separate the static website from the dynamic web-app
  www:
    hostname: www
    # rather than using apache2, we use nginx with static html files
    image: nginx:latest
    volumes:
      - "./www/www:/usr/share/nginx/html:ro"
      - "./ssl/www/certs:/etc/nginx/certs/:ro"
    ports:
      - 2080:80/tcp
      - 2443:443/tcp
    # environment variables for the nginx-proxy analyzer/generator to dynamically generate the proxy configuration
    environment:
      - VIRTUAL_HOST=www.${FQ_DOMAIN_NAME}
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=80,443
    #restart: unless-stopped
    networks:
      my-rust-app-network: 
        # sadly, if I do not specify the IP address, things just don't work...
        ipv4_address: 10.86.86.100

  # though it's an overkill, I like the concept of persisting/caching
  # auth token in redis
  redis:
    image: redis:latest
    command: redis-server 
    ports:
      - "6379:6379"
    # if and when we decide to persist the redis data, we can use this volume, but for now, we just need to cache it
    #volumes:
    #  - redis-data:/data

  my-rust-app:
    hostname: my-rust-app
    image: my-rust-app-image:latest
    # port forward 8000 on THIS host to port 8000 in the container
    depends_on:
      - gateway
      - www
      - internal-developers
    ports:
      - 6666:666/tcp
    # from inside the my-rust-app container, you could access the oauth2-proxy service at http://oauth2-proxy:4180.
    networks:
      my-rust-app-network: 
        # sadly, if I do not specify the IP address, things just don't work...
        ipv4_address: 10.86.86.200

  #volumes:
  #  redis-data:
